/*
 * Copyright (C) 2021-2024, HENSOLDT Cyber GmbH
 * 
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

/**
 * @file
 *
 * Generic TRENTOS Network Stack CAmkES template code.
 *
 * This file provides macros that can be used for the definition of a network
 * stack component. The network stack component implements the socket interface
 * (if_OS_Socket) and connects to a NIC driver component via the NIC component
 * interface (if_OS_Nic).
 */

#pragma once

import <std_connector.camkes>;
import <global-connectors.camkes>;

#include "lib_macros/ForEach.h"

#include <if_OS_Nic.camkes>
#include <if_OS_Socket.camkes>

#include "NetworkStack_PicoTcp/camkes/NetworkStack_Ticker.camkes"
#include "if_NetworkStack_PicoTcp_Config.camkes"

/** @cond SKIP_IMPORTS */
import <if_OS_Timer.camkes>;
/** @endcond */

//------------------------------------------------------------------------------

struct NetworkStack_ClientConfig {
    int socket_quota;
}

struct NetworkStack_Config {
    NetworkStack_ClientConfig clients[];
}

// Private macros --------------------------------------------------------------

#define _NWSTACK_EMPTY

/**
 * Internal macro that used to configure the socket quota for each connected
 * client.
 */
#define NetworkStack_PicoTcp_INSTANCE_CONFIGURATOR( \
    _unused0_, \
    _unused1_, \
    _socket_quota_, \
    _unused2_) \
    \
    { \
        "socket_quota": _socket_quota_ \
    },

// Public macros ---------------------------------------------------------------

//! Macro for the component definition if no other interfaces are used.
#define NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES _NWSTACK_EMPTY

/**
 * Defines a network stack component.
 *
 * It can offer one or more socket interfaces and can connect to a NIC driver
 * component via the NIC component interface.
 *
 * @param[in] name             Name of the network stack component. This is
 *                             meant not to be an instance name but rather a
 *                             'type' name.
 * @param[in] nic_port_size    Size of the dataport to connect to the NIC driver
 *                             component.
 * @param[in] other_interfaces Definitions of fields of additional interfaces to
 *                             which this component could connect to (e.g.: a
 *                             logger component to log its error messages).
 */
#define NetworkStack_PicoTcp_COMPONENT_DEFINE( \
    name, \
    nic_port_size, \
    other_interfaces) \
    \
    component name \
    { \
        control; \
        \
        consumes  EventDataAvailable    event_tick_or_data; \
        emits     EventDataAvailable    event_internal; \
        has       mutex                 allocatorMutex; \
        has       mutex                 nwstackMutex; \
        has       mutex                 socketControlBlockMutex; \
        has       mutex                 stackThreadSafeMutex; \
        attribute NetworkStack_Config   networkStack_config; \
        \
        /*------------------------------------------------------------------*/ \
        /* interface TimeServer */ \
        uses      if_OS_Timer           internal_timeServer_rpc; \
        consumes  TimerReady            internal_timeServer_notify; \
        \
        uses        if_OS_Timer         timeServer_rpc; \
        consumes    TimerReady          timeServer_notify; \
        \
        /*------------------------------------------------------------------*/ \
        /* if_OS_Nic without a dedicated event, because our interface */ \
        /* 'event_tick_or_data' is a shared sink for multiple event sources */ \
        IF_OS_NIC_USE_WITHOUT_EVENT(nic, nic_port_size) \
        \
        /*------------------------------------------------------------------*/ \
        /* interface to application */ \
        provides if_NetworkStack_PicoTcp_Config if_config_rpc; \
        IF_OS_SOCKET_PROVIDE(networkStack) \
        \
        /*------------------------------------------------------------------*/ \
        /* other interfaces */ \
        other_interfaces \
        \
        composition \
        { \
            component Ticker ticker;\
            \
            export ticker.timeServer_rpc -> timeServer_rpc; \
            export ticker.timeServer_notify -> timeServer_notify; \
            \
            connection seL4NotificationNative \
                conn_event_internal( \
                    from event_internal, \
                    to   event_tick_or_data); \
            \
            connection seL4RPCCall \
                network_stack_internal_timeServer_rpc( \
                    from    internal_timeServer_rpc, \
                    to      ticker.proxy_timeServer_rpc); \
            \
            connection seL4NotificationNative \
                network_stack_internal_timeServer_event( \
                    from    ticker.proxy_timeServer_notify, \
                    to      internal_timeServer_notify); \
            \
            connection seL4NotificationNative \
                conn_event_internal_ticker( \
                    from ticker.event_tick, \
                    to   event_tick_or_data); \
        \
        } \
        configuration \
        { \
            ticker.timeServer_rpc_attributes <- timeServer_rpc_attributes; \
        } \
    }

/**
 * Connects a network stack instance to a NIC component.
 *
 * So far, all NIC component interface related fields of the network stack use
 * the prefix 'nic', and the same prefix is also used by all network drivers for
 * their NIC component interface related fields. As long a no NIC driver breaks
 * this scheme (e.g. because it has multiple NIC component interfaces), there is
 * no need to have an additional macro parameter here that passes the driver's
 * prefix.
 *
 * @param[in] inst             Name of the network stack component instance.
 * @param[in] nic_inst         Name of the NIC component instance to which the
 *                             network stack component has to connect to.
 */
#define NetworkStack_PicoTcp_INSTANCE_CONNECT( \
    inst, \
    nic_inst) \
    \
    IF_OS_NIC_CONNECT(\
        nic_inst, \
        nic, \
        inst, \
        nic, \
        event_tick_or_data)

/**
 * Connects a client component (e.g.: Configuration management component) to the
 * if_OS_NetworkStack interface of a network stack instance.
 *
 * @param[in] inst                      Name of the network stack component
 *                                      instance.
 * @param[in] inst_user                 User component instance name.
 * @param[in] inst_user_field_prefix    Prefix used to generate a unique name
 *                                      for the connectors in
 *                                      if_NetworkStack_PicoTcp_Config_USE().
 */
#define NetworkStack_PicoTcp_INSTANCE_CONNECT_CONFIG_CLIENT( \
    inst, \
    inst_user, \
    inst_user_field_prefix) \
    \
    connection seL4RPCCall \
        conn_##inst_user##_##inst##_rpc( \
            from inst_user.inst_user_field_prefix##_rpc, \
            to   inst.if_config_rpc);

 /**
 * Connects a variable number of client components to the if_OS_Socket interface
 * of a network stack instance.
 *
 * @param[in] inst              Name of the network stack component instance.
 * @param[in] ...               List of client user component instance names and
 *                              the prefix used to generate a unique name for
 *                              the connectors used in IF_OS_SOCKET_USE() and
 *                              that should be connected with the network stack
 *                              instance specified earlier. To connect several
 *                              user components at once follow the pattern of:
 *
 *                              <inst_user1>, <inst_user1_prefix_if_os_socket>,
 *                              <inst_user2>, <inst_user2_prefix_if_os_socket>,
 *                              ...
 */
#define NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS( \
    inst, \
    ...) \
    \
    FOR_EACH_2P(IF_OS_SOCKET_CONNECT, \
                inst, \
                networkStack, \
                __VA_ARGS__)

// Assign a single badge; this is used internally
#define NetworkStack_PicoTcp_BADGE_ASSIGNER( \
    _unused0_, \
    _unused1_, \
    _inst_user_, \
    _inst_user_field_prefix_, \
    _num_) \
    \
    _inst_user_._inst_user_field_prefix_ ## _rpc_attributes = (100 + _num_);

/**
 * Assign a badge value to a client.
 *
 *      NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGE(
 *          <inst_user1>, <inst_user1_prefix_if_os_socket>, <ID>
 *      )
 *
 */
#define NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGE( \
    _inst_user_, \
    _inst_user_field_prefix_, \
    _val_) \
    \
    _inst_user_._inst_user_field_prefix_ ## _rpc_attributes = _val_;

/**
 * Assign badges to a list of clients; badge IDs will start at 101 and then be
 * incremented.
 *
 *      NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
 *          <inst_user1>, <inst_user1_prefix_if_os_socket>,
 *          <inst_user2>, <inst_user2_prefix_if_os_socket>,
 *           ...
 *      )
 *
 * NOTE: Can take up to 8 clients.
 *
 */
#define NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES( \
    ...) \
    \
    FOR_EACH_2P(NetworkStack_PicoTcp_BADGE_ASSIGNER,UNUSED,UNUSED,__VA_ARGS__)

/**
 * Configure all clients connected to a NetworkStack_PicoTcp instance:
 *
 *      NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
 *          <instance>,
 *          <socket_quota0>,
 *          <socket_quota1>,
 *          ...
 *      )
 * Make sure to pass clients in same order as they are passed in the
 * NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS() macro.
 */
#define NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS( \
    _inst_, \
    ...) \
    \
    _inst_.networkStack_config = { \
        "clients": [ \
            FOR_EACH_1P(NetworkStack_PicoTcp_INSTANCE_CONFIGURATOR, \
                        UNUSED,UNUSED,__VA_ARGS__) \
        ] \
    };
